% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_clean.R
\name{epi_clean_transpose}
\alias{epi_clean_transpose}
\title{Test

library(purrr)
library(tibble)
nested_list_dfs <- purrr::flatten(list(df3, df3, df3))
id_col <- 'var_id'
epi_list_head(nested_list_dfs, 2, 3)
epi_list_tail(nested_list_dfs, 2, 3)
all_merged <- epi_clean_merge_nested_dfs(nested_list_dfs, id_col)
dim(all_merged)
as.tibble(all_merged)
names(all_merged)}
\usage{
epi_clean_transpose(df, id_col_num)
}
\description{
This function would be equivalent to iteratively doing:Create sets with distinct observations:

library(dplyr)use df2 after custom function above add_rep_num():

df2See how many replicates there are:

df2 %>%
transmute(as.factor(rep_num)) %>%
summary()
}
\details{
Generate a data frame for each:

baseline <- df2 %>%
filter(rep_num == 1)
baselineSanity check, should be empty:

epi_clean_get_dups(baseline, 'var_id', 1)Change col names to baseline, time_1, time_2, etc.:

new_colnames <- epi_clean_add_colname_suffix(baseline, 1, '.0')
names(baseline)\link{2:ncol(baseline)} <- new_colnames
names(baseline)First set of repeated observations:

time_1 <- df2 %>%
filter(rep_num == 2)
time_1
epi_clean_get_dups(time_1, 'var_id', 1)Change col names:

new_colnames <- epi_clean_add_colname_suffix(time_1, 1, '.1')
names(time_1)\link{2:ncol(time_1)} <- new_colnames
names(time_1)Nothing left:

df2 %>%
filter(rep_num == 3)Merge the data frames into one:

all_merged <- merge(baseline, time_1, by = 'var_id', all = TRUE)
dim(all_merged)
as.tibble(all_merged)
names(all_merged)
epi_head_and_tail(all_merged)
epi_head_and_tail(all_merged, last_cols = TRUE)
View(all_merged)
Transposes a data frame file and preserves row and column names:
Assumes there is an id column with unique IDs
}
